// auto-generated
// Code generated by GUI builder.

package main

import (
	"fmt"
	"image/color"
	"net/url"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

type gui struct {
	brandintro *widget.RichText
	schedule   *widget.Accordion
	plan       *widget.List
	tabs       *container.AppTabs
}

func newGUI() *gui {
	return &gui{}
}

func (g *gui) makeUI() fyne.CanvasObject {
	g.brandintro = widget.NewRichTextFromMarkdown(`GoLab The International Conference on Go in Florence`)
	g.schedule = widget.NewAccordion(widget.NewAccordionItem("Item 1", widget.NewLabel("The content goes here")), widget.NewAccordionItem("Item 2", widget.NewLabel("Content part 2 goes here")))
	g.plan = widget.NewList(func() int {
		return 5
	}, func() fyne.CanvasObject {
		return widget.NewLabel("Template Object")
	}, func(id widget.ListItemID, item fyne.CanvasObject) {
		item.(*widget.Label).SetText(fmt.Sprintf("Item %d", id+1))
	})
	g.tabs = container.NewAppTabs(container.NewTabItemWithIcon("Home", theme.HomeIcon(),
		container.NewBorder(

			container.NewBorder(
				nil,
				nil,
				nil,

				widget.NewButtonWithIcon("", theme.HelpIcon(), g.showAbout),
				&widget.Label{Text: "Welcome to an unnofficial GoLab App. Explore the conference talks and manage your plan.", Alignment: 0, Wrapping: 3}),

			container.NewVBox(
				container.NewCenter(
					widget.NewHyperlink("GoLab website", &url.URL{Scheme: "https", Opaque: "", User: (*url.Userinfo)(nil), Host: "golab.io", Path: "/", RawPath: "", OmitHost: false, ForceQuery: false, RawQuery: "", Fragment: "", RawFragment: ""})),
				&widget.Label{Text: "November 11th - 13th 2024", Alignment: 1, Wrapping: 0}),
			nil,
			nil,
			container.NewStack(
				&canvas.Rectangle{FillColor: &color.NRGBA{R: 0xf4, G: 0xff, B: 0x42, A: 0xff}, StrokeColor: &color.NRGBA{R: 0x0, G: 0x0, B: 0x0, A: 0xff}, StrokeWidth: 2, CornerRadius: 0},
				container.NewCenter(
					g.brandintro)))),
		container.NewTabItemWithIcon("Schedule", theme.QuestionIcon(),
			container.NewStack(
				g.schedule)),
		container.NewTabItemWithIcon("My Plan", theme.AccountIcon(),
			container.NewStack(
				g.plan)))

	return container.NewStack(
		g.tabs)
}
